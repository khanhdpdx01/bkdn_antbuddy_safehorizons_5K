version: '3'
# networks:
#   backend:
#     driver: bridge
#   frontend:
#     driver: bridge
services:
  # db:
  #   image: mysql:8.0.26
  #   #hostname: postgres
  #   container_name: videoconference-db
  #   cap_add:
  #     - SYS_NICE  # CAP_SYS_NICE
  #   restart: always
  #   command: --default-authentication-plugin=mysql_native_password
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=root
  #     - MYSQL_PASSWORD=Ket0328560055
  #     - MYSQL_USER=vanket1512001
  #     - MYSQL_DATABASE=videoconference
  #     - MYSQL_TCP_PORT=3306
  #   ports:
  #      - "3306:3306"
  #     #- target: 3306 # port container
  #     #  published: 3306 # port local
  #     #  protocol: tcp
  #     #  mode: host
  #   volumes:
  #     - ./database:/var/lib/mysql # mount data from container out local whenever restart application
  #   networks:
  #     - backend
  #   expose:
  #     - 3306
  api:                                  # Back end springboot container
    container_name: ecommerce-api # Container name is 'ecommerce API'
    restart: always                     # Restart policy: always restart the container when it exits
    build:
      context: ./                       # Specify the context root directory, and then specify the Dockerfile based on the directory
      dockerfile: ./docker/api/Dockerfile
    working_dir: /app                   # Set working directory as app folder in container
    volumes:
      - /app/node_modules                            # Mount file
      - ./backend:/app                  # Map the host's backend folder (java code) to the app folder in the container
      - ./logs/:/app/log                # Map the logs generated by the container to the logs folder of the host
      - ./backend/.env:/app/.env
    # environment:
    #   - ./backend/.env:/app/.env
    ports:                              # Mapping port
      - "8000:8000"
    # depends_on:
    #   - db
    # networks:
    #   - backend
    # links:
    #   - db
#    # Execute the command to run the springboot project after the container is created
    # command: mvn clean spring-boot:run '-Dmaven.test.skip=true'

  web:                                  # Front end node container (running Vue projects in nginx)
    container_name: ecommerce-web # Container name is 'ecommerce web'
    restart: always                     # Restart policy: always restart the container when it exits
    build:
      context: ./                       # Specify the context root directory, and then specify the Dockerfile based on the directory
      dockerfile: ./docker/web/Dockerfile
    volumes:
      - /app/node_modules
      - ./frontend:/app  
#      - ./certbot/www:/var/www/certbot
      # - ./ssl:/etc/nginx/ssl
      # - ./dhparam:/etc/nginx/dhparam
    ports:
      - "3000:3000"                      # Mapping port
      # - "443:443"
    # links:
    #   - api
    depends_on:                          # Depends on the api container. This web container can only be started after being started by the dependent container
      - api
    # networks:
    #   - frontend
  # certbot:
  #   image: certbot/certbot:latest
  #   volumes:
  #     - ./certbot/www/:/var/www/certbot/:rw
  #     - ./certbot/conf/:/etc/letsencrypt/:rw
  nginx:
    container_name: ecommerce-nginx # Container name is 'ecommerce nginx'
    restart: always                     # Restart policy: always restart the container when it exits
    build:
      context: ./
      dockerfile: ./docker/nginx/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - web
    links:
      - web
    